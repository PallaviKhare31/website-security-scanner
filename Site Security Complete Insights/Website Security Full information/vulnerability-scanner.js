// VirusTotal API client for Website Security Scanner

class VulnerabilityScanner {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.virusTotalApiUrl = 'https://www.virustotal.com/api/v3/domains/';
    this.requestTimeout = 10000; // 10 seconds timeout
  }

  /**
   * Check a domain for vulnerabilities using VirusTotal API
   * @param {string} domain - The domain to check
   * @returns {Promise<Object>} - The check result
   */
  async checkDomain(domain) {
    try {
      // If API key is not set, return a warning
      if (!this.apiKey || this.apiKey === 'YOUR_VIRUSTOTAL_API_KEY') {
        console.warn('VirusTotal API key not configured');
        return {
          status: 'warning',
          score: 7, // Reduced score due to unconfigured API
          details: {
            message: 'Vulnerability check skipped (API key not configured)',
            lastAnalysisStats: {},
            categories: {},
            apiConfigured: false
          }
        };
      }

      // Create AbortController for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.requestTimeout);

      try {
        const response = await fetch(`${this.virusTotalApiUrl}${domain}`, {
          method: 'GET',
          headers: {
            'x-apikey': this.apiKey,
            'Content-Type': 'application/json'
          },
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }

        const data = await response.json();
        const attributes = data.data.attributes;
        
        // Extract relevant information
        const lastAnalysisStats = attributes.last_analysis_stats || {};
        const categories = attributes.categories || {};
        const lastAnalysisResults = attributes.last_analysis_results || {};
        
        // Calculate malicious ratio
        const malicious = lastAnalysisStats.malicious || 0;
        const suspicious = lastAnalysisStats.suspicious || 0;
        const total = Object.values(lastAnalysisStats).reduce((sum, count) => sum + count, 0) || 1;
        const maliciousRatio = (malicious + suspicious) / total;
        
        // Determine status and score based on malicious ratio
        let status, score, message;
        
        if (maliciousRatio >= 0.1) { // More than 10% engines report malicious
          status = 'failed';
          score = 0;
          message = `Domain flagged as malicious by ${malicious} security vendors`;
        } else if (maliciousRatio > 0) { // Some engines report malicious
          status = 'warning';
          score = Math.max(0, Math.floor(15 - (maliciousRatio * 100)));
          message = `Domain flagged as suspicious by ${malicious + suspicious} security vendors`;
        } else { // No engines report malicious
          status = 'passed';
          score = 15;
          message = 'No known vulnerabilities detected';
        }
        
        // Get detection details from engines
        const detections = Object.entries(lastAnalysisResults)
          .filter(([_, result]) => result.category === 'malicious' || result.category === 'suspicious')
          .map(([engine, result]) => `${engine}: ${result.result}`);
        
        return {
          status: status,
          score: score,
          details: {
            message: message,
            lastAnalysisStats: lastAnalysisStats,
            categories: categories,
            detections: detections,
            scanDate: new Date().toISOString(),
            source: 'VirusTotal',
            apiConfigured: true
          }
        };
      } finally {
        clearTimeout(timeoutId);
      }
    } catch (error) {
      console.error('Error checking vulnerabilities:', error);
      
      // Handle timeout specifically
      if (error.name === 'AbortError') {
        return {
          status: 'error',
          score: 5, // Partial score due to API timeout
          details: {
            message: 'Vulnerability check timed out',
            error: 'Request timeout',
            apiConfigured: this.apiKey !== 'YOUR_VIRUSTOTAL_API_KEY'
          }
        };
      }
      
      return {
        status: 'error',
        score: 5, // Partial score due to API error
        details: {
          message: `Error checking vulnerabilities: ${error.message}`,
          error: error.message,
          apiConfigured: this.apiKey !== 'YOUR_VIRUSTOTAL_API_KEY'
        }
      };
    }
  }
}

// Export the client
if (typeof module !== 'undefined') {
  module.exports = VulnerabilityScanner;
}
